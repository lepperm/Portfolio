# Using local node image to build the React app
image: node:12.18.0

# Announce the URL as per CRA docs (moved to build stage)
# https://create-react-app.dev/docs/advanced-configuration/
variables:
  PRELIM_URL: "https://maxlepper.gitlab.io/portfolio/"
  LIVE_URL: "https://maxlepper.me"

# Cache node modules - speeds up future builds
cache:
  paths:
    - node_modules/

# Name the stages involved in the pipeline
stages:
  - install
  - quality
  - build
  - deploy
  - audit

install:
  stage: install
  script:
    - echo "Installing dependencies"
    - npm install # Install all dependencies
  artifacts:
    name: "artifacts"
    untracked: true
    expire_in: 60 mins
    paths:
      - node_modules/

quality:jest:
  stage: quality
  script:
    - echo "Running tests"
    # CI=true will tell Jest to not run in watch mode
    # --env=jsdom provides a mock browser environment for testing
    # --coverage generates a human-readable summary of testing
    # --watchAll=false should force tests to run once, if CI=true doesn't
    - CI=true npm test -- --env=jsdom --coverage --watchAll=false
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  # Extracts the final overall coverage percentage. Also configured in gitlab for history
  allow_failure: true

build:staging:
  stage: build
  script:
    - echo "Building"
    - CI=false PUBLIC_URL="/portfolio" npm run build #  CI=false will allow our build to complete with warnings
    - echo "Zipping up files pre-deployment"
    - gzip -k -9 $(find build -type f)
  artifacts:
    paths:
      - build
    expire_in: 60 mins
  only:
    - master
    - dev

build:production:
  stage: build
  script:
    - echo "Building"
    - CI=false PUBLIC_URL="" npm run build
    - echo "Zipping up files pre-deployment"
    - gzip -k -9 $(find build -type f)
  artifacts:
    paths:
      - build
    expire_in: 60 mins
  when: manual
  only:
    - master
    - dev

# Job name for gitlab to recognise this results in assets for Gitlab Pages
# https://docs.gitlab.com/ee/user/project/pages/introduction.html#gitlab-pages-requirements
pages:
  stage: deploy
  script:
    - echo "Deploying Build to Staging (Pages)"
    - rm -rfv public # Remove the existing public folder
    - mkdir -pv public # Create a new empty public folder
    - cp -rpv build/* public # Copy build files to public dir for Gitlab Pages
    - cp -pv public/index.html public/404.html
  environment:
    name: Staging
    url: https://maxlepper.gitlab.io/portfolio
  artifacts:
    paths:
      - public # The built files for Gitlab Pages to serve. MUST be "public"
    expire_in: 60 mins
  dependencies:
    - build:staging
  needs: ["build:staging"]
  only:
    - master
    - dev

# Deploy to Firebase
firebase:
  stage: deploy
  before_script:
    - (if [ -d "build" ]; then echo "Found build folder"; else exit "No build folder found, try running pipeline again"; fi);
    - npm install -g firebase-tools
  script:
    - echo "Deploying build to Production (Firebase)"
    - mkdir firedeploy
    - cp -rpv build/* firedeploy
    - firebase deploy -m "Pipeline $CI_PIPELINE_ID, commit $CI_COMMIT_TAG" --non-interactive --token $FIREBASE_DEPLOY_KEY
  environment:
    name: Production
    url: https://maxlepper.me
  artifacts:
    paths:
      - firedeploy
    expire_in: 60 mins
  dependencies:
    - build:production
  needs: ["build:production"]
  only:
    - master

# Conduct lighthouse audit on preliminary
lighthouse:pages:
  image: markhobson/node-chrome
  stage: audit
  before_script:
    - npm i -g lighthouse
  script:
    - lighthouse --chrome-flags="--headless --no-sandbox" $PRELIM_URL --output html --output-path ./report.html
  artifacts:
    paths:
      - ./report.html
    expire_in: 1 week
  needs: ["pages"]
  only:
    - master
    - dev
  allow_failure: true

# Conduct lighthouse audit on production
lighthouse:firebase:
  image: markhobson/node-chrome
  stage: audit
  before_script:
    - npm i -g lighthouse
  script:
    - lighthouse --chrome-flags="--headless --no-sandbox" $LIVE_URL --output html --output-path ./report.html
  artifacts:
    paths:
      - ./report.html
    expire_in: 1 week
  needs: ["firebase"]
  only:
    - master
  allow_failure: true
